#pragma once

#include <vector>
#include <string>
#include <map>

using namespace std ;
//=========================================
//数据类型缩写定义
typedef vector<string> VS;	//字符串向量
typedef vector<int> VI;		//数值向量
//----------------------------------------

class CEn
{
public:
 
	CEn(char* name,int choise);	//Constructor，初始化变量
	~CEn(void);					//Destructor

	//===========================主成员函数区============================
	/* ******************************************************************
	OriginalWordBaseLoad()： 原始词库载入函数，当第一次使用一个词库练习时，
		之前没有历史记录，此时需载入原始词库信息
	MyWordBaseLoad()： 个人词库载入函数，当如果之前已经使用过该词库，则已
		经生成“个人词库”，这时需载入个人词库信息，在之前记录的基础上继续。
		该函数中包含：
		1.“我的词库信息载入”模块，用于载入“个人词库”的统计信息，
			历史词库所需要的统计信息，以及词库信息。
		2.“正确与错误次数载入”模块，用于载入个人词库中所有单词做正确与
			错误的次数
		3.“历史数据载入”模块，用于从“历史记录”文件中载入信息。以便本次
			练习之后保存更新数据。
	ThisTest()：用于生成“本次测验”的控制过程，并计算各种统计数据，为其它
		函数提供计算所需的数据

	*********************************************************************** */
	
	void OriginalWordBaseLoad();    //原始词库载入函数
	void MyWordBaseLoad();			//个人词库载入函数
	void ThisTest();				//“本次测验”函数

	/* **********************************************************************
	MyWordBaseSave()：我的词库保存函数，在“本次测试”结束后保存“个人词库”
		的各种信息，下次测试时可直接载入“我的词库信息”。
	MyHistorySave()：历史词库保存函数，结束本次测试之后，保存历史记录。该记录
		中含有单词剩余数量（以及单词总数）、累积统计记录、最近10次练习记录，
		其中，每次练习记录中包含本次练习的时间、统计信息、该次练习中做错的单词。
		当已做练习的次数少于10次时，记录全部保存，当已做练习的次数多于10次时，
		采用动态更新的方式只保存最近的10次记录。最新的记录在上面。
	MyWrongSave()：该函数用于保存错词记录文件，将历次所有做错的词集中保存在
		该文件中，所有单词按出错频率由高到低排列，便于复习查看

	*********************************************************************** */
	void MyWordBaseSave();	  //我的词库保存函数
	void MyHistorySave();     //历史词库保存函数
	void MyWrongSave();       //错词库保存函数
	//======================================================================

	//============================子函数区==================================
	/* ********************************************************************
	MyStrCat4：此函数可以连接4个字符串，用于连接几个字符串生成相应的文件名
	FindMember：从向量中查找元素:如果向量为空或者没有要查找的元素，返回0，
		否则返回下标+1	
	InputProcess：用来对输入信息进行处理，输入一般为做出的选项选择信息、程序
		退出等，输入信息以字符串的形式接收，该函数将输入的字符串转化成数字信息，
		对于非法输入，返回-1				
	   
	********************************************************************* */
	void MyStrCat4(char*,char*,char*,char*,char*); 
	int FindMember(vector<int> v,int mem); 
	int InputProcess(char*);
	
	//======================================================================

	char* MyName;			//存放使用者的名字
	char* WordBaseName[4];  //原始词库的变量名
	int WordBaseChoice;		//词库选项数字

	/* ********************************************************
	3 个文件夹分别为：“原始词库”，“我的词库”、“我的记录”
	其中，“我的记录”文件夹是返回给用户的
	********************************************************* */
	char* WordBaseDir;		//“我的词库”文件夹名
	char* MyWordBaseDir;    //“原始词库”文件夹名
	char* MyRecordDir;		//“我的记录”文件夹名

	/* ********************************************************
	4 个文件夹分别为：“我的词库”、“我的历史记录”，“我的正确错误记录”
	“我的错词库”。其中，“我的历史记录”和“我的错词库”是返回给用户的
	它们都包含在“我的记录”文件夹中
	********************************************************* */
	char MyWordBase[100];		//“我的词库”文件名
	char MyHistoryRecord[100];  //“我的历史记录”文件名
	char MyRightWrong[100];      //我的正确和错误次数的记录文件
	char MyWrongWords[100];     //“我的错词库”文件名

	int MyWordNum0;			//个人词库含有词的数量（本次测试之前）			
	int MyWordNum;			//记录本次测试后剩余词汇量
	int ThisWordsNum;		//本次所做单词的个数
	int ThisWrongNum ;		//记录本次测试中做错的词汇个数 

	string BeginTime;		//第一次开始训练的时间
	string LastTime;		//上一次训练的时间


private:

	bool RecordFlag;	//标记是否存在个人记录

	VS Word;	// 存放单词的字符串向量
	VS Mean;	// Word 和 Mean 分别存放词库中的单词和意思
	
	int TotalWordNum;	//记录原始词库含有词的数量

	VI RightTimes;		//记录每个单词的正确次数
	VI WrongTimes;		//记录每个单词的错误次数
	VI DeleteSign;		//标记应该从个人词库中删除的词汇
	VI ThisWrongIdx;	//记录本次测试中做错词汇的下标

	int ThisParameter[4]; 
	//分别存放本次练习的总数、正确数、错误数、正确率（4个元素）

	//--------------------个人记录中需要保存的参数---------------------
	/*****************************************************************
	  TotalParameter 数组中分别存放所有练习的总数、正确数、错误数、   
			正确率、原始词汇数、剩余单词数（6个元素）				  
	  HistoryLineNum 保存本次之前最近9条记录每条记录的行数（9个元素） 
			共保存最近10条历史记录									  
	*****************************************************************/

	int TotalParameter[6];		
	int HistoryLineNum[9]; 

	VS HistoryRecord;	// 存放所有历史记录条目
	int HistoryLine;	//历史记录所占的总行数

	//-------------------------错词记录数据-----------------------
	/***********************************************************************
	 WrongWord 是一个多重映射容器，用于存放所有做错的单词以及对应做错的次数 
		里面的所有记录条目按做错次数降序排列								
	***********************************************************************/
	multimap< int, string, greater<int> > WrongWord;
	//multimap<int, string> WrongWord;

};
